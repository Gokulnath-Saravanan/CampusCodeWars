name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  frontend-checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './client/package-lock.json'

    - name: Install Dependencies
      run: npm ci
    
    - name: Check Code Format
      run: npm run format:check || npm run prettier
    
    - name: Lint Check
      run: npm run lint
    
    - name: Type Check
      run: npm run type-check || npm run tsc
    
    - name: Run Tests
      run: npm test

    - name: Build Frontend
      run: npm run build

  backend-checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './server/package-lock.json'

    - name: Install Dependencies
      run: npm ci
    
    - name: Check Code Format
      run: npm run format:check || npm run prettier
    
    - name: Lint Check
      run: npm run lint
    
    - name: Type Check
      run: npm run type-check || npm run tsc
    
    - name: Run Tests
      run: npm test
      env:
        MONGODB_URI: mongodb://localhost:27017/test
        JWT_SECRET: test_secret
        PORT: 5000

    - name: Build Backend
      run: npm run build

  docker-build:
    needs: [backend-checks]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Backend Docker Image
      uses: docker/build-push-action@v4
      with:
        context: ./server
        push: false
        tags: campuscodewars-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security:
    needs: [backend-checks, frontend-checks]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Snyk to check for backend vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: test
        args: --severity-threshold=high --file=server/package.json
        
    - name: Run Snyk to check for frontend vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: test
        args: --severity-threshold=high --file=client/package.json
        
  docker-backend:
    needs: [backend-checks, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push backend
      uses: docker/build-push-action@v4
      with:
        context: ./server
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/campuscodewars-backend:latest
        
  deploy-backend:
    needs: docker-backend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to Render
      env:
        RENDER_TOKEN: ${{ secrets.RENDER_TOKEN }}
        SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      run: |
        curl -X POST "https://api.render.com/v1/services/$SERVICE_ID/deploys" \
        -H "Authorization: Bearer $RENDER_TOKEN"
        
  deploy-frontend:
    needs: [frontend-checks, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
    
    - name: Deploy to Vercel
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      run: |
        cd client
        vercel pull --yes --environment=production --token=$VERCEL_TOKEN
        vercel build --prod --token=$VERCEL_TOKEN
        vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN 